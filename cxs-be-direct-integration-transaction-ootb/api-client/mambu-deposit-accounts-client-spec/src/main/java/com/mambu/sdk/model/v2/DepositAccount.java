/*
 * deposits
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.mambu.sdk.model.v2;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.threeten.bp.OffsetDateTime;

import java.io.IOException;
import java.util.List;
import java.util.Objects;

/**
 * An account where a customer holds his savings
 */
@ApiModel(description = "An account where a customer holds his savings")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-04-17T14:24:31.447Z")
public class DepositAccount {
    @SerializedName("encodedKey")
    private String encodedKey = null;

    @SerializedName("creationDate")
    private OffsetDateTime creationDate = null;

    @SerializedName("lastModifiedDate")
    private OffsetDateTime lastModifiedDate = null;

    @SerializedName("id")
    private String id = null;

    @SerializedName("name")
    private String name = null;

    @SerializedName("notes")
    private String notes = null;
    @SerializedName("accountHolderType")
    private AccountHolderTypeEnum accountHolderType = null;
    @SerializedName("accountHolderKey")
    private String accountHolderKey = null;
    @SerializedName("accountState")
    private AccountStateEnum accountState = null;
    @SerializedName("productTypeKey")
    private String productTypeKey = null;
    @SerializedName("accountType")
    private AccountTypeEnum accountType = null;
    @SerializedName("creditArrangementKey")
    private String creditArrangementKey = null;
    @SerializedName("approvedDate")
    private OffsetDateTime approvedDate = null;
    @SerializedName("activationDate")
    private OffsetDateTime activationDate = null;
    @SerializedName("lockedDate")
    private OffsetDateTime lockedDate = null;
    @SerializedName("maturityDate")
    private OffsetDateTime maturityDate = null;
    @SerializedName("closedDate")
    private OffsetDateTime closedDate = null;
    @SerializedName("lastInterestCalculationDate")
    private OffsetDateTime lastInterestCalculationDate = null;
    @SerializedName("lastInterestStoredDate")
    private OffsetDateTime lastInterestStoredDate = null;
    @SerializedName("lastOverdraftInterestReviewDate")
    private OffsetDateTime lastOverdraftInterestReviewDate = null;
    @SerializedName("lastAccountAppraisalDate")
    private OffsetDateTime lastAccountAppraisalDate = null;
    @SerializedName("lastSetToArrearsDate")
    private OffsetDateTime lastSetToArrearsDate = null;
    @SerializedName("currencyCode")
    private String currencyCode = null;
    @SerializedName("assignedBranchKey")
    private String assignedBranchKey = null;
    @SerializedName("assignedCentreKey")
    private String assignedCentreKey = null;
    @SerializedName("assignedUserKey")
    private String assignedUserKey = null;
    @SerializedName("migrationEventKey")
    private String migrationEventKey = null;
    @SerializedName("withholdingTaxSourceKey")
    private String withholdingTaxSourceKey = null;
    @SerializedName("internalControls")
    private DepositAccountInternalControls internalControls = null;
    @SerializedName("overdraftSettings")
    private DepositAccountOverdraftSettings overdraftSettings = null;
    @SerializedName("interestSettings")
    private DepositAccountInterestSettings interestSettings = null;
    @SerializedName("overdraftInterestSettings")
    private DepositAccountOverdraftInterestSettings overdraftInterestSettings = null;
    @SerializedName("balances")
    private DepositAccountBalances balances = null;
    @SerializedName("accruedAmounts")
    private DepositAccountAccruedAmounts accruedAmounts = null;
    @SerializedName("linkedSettlementAccountKeys")
    private List<String> linkedSettlementAccountKeys = null;

    /**
     * The encoded key of the deposit account, auto generated, unique
     *
     * @return encodedKey
     **/
    @ApiModelProperty(value = "The encoded key of the deposit account, auto generated, unique")
    public String getEncodedKey() {
        return encodedKey;
    }

    /**
     * The date this deposit account was created (as UTC)
     *
     * @return creationDate
     **/
    @ApiModelProperty(example = "2016-09-06T13:37:50+03:00", value = "The date this deposit account was created (as UTC)")
    public OffsetDateTime getCreationDate() {
        return creationDate;
    }

    public void setCreationDate(OffsetDateTime creationDate) {
        this.creationDate = creationDate;
    }

    /**
     * The last date the deposit account was updated (as UTC)
     *
     * @return lastModifiedDate
     **/
    @ApiModelProperty(example = "2016-09-06T13:37:50+03:00", value = "The last date the deposit account was updated (as UTC)")
    public OffsetDateTime getLastModifiedDate() {
        return lastModifiedDate;
    }

    public DepositAccount id(String id) {
        this.id = id;
        return this;
    }

    /**
     * The id of the deposit account, can be generated and customized, unique
     *
     * @return id
     **/
    @ApiModelProperty(value = "The id of the deposit account, can be generated and customized, unique")
    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public DepositAccount name(String name) {
        this.name = name;
        return this;
    }

    /**
     * The name of the deposit account
     *
     * @return name
     **/
    @ApiModelProperty(required = true, value = "The name of the deposit account")
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public DepositAccount notes(String notes) {
        this.notes = notes;
        return this;
    }

    /**
     * Extra notes about this deposit account
     *
     * @return notes
     **/
    @ApiModelProperty(value = "Extra notes about this deposit account")
    public String getNotes() {
        return notes;
    }

    public void setNotes(String notes) {
        this.notes = notes;
    }

    public DepositAccount accountHolderType(AccountHolderTypeEnum accountHolderType) {
        this.accountHolderType = accountHolderType;
        return this;
    }

    /**
     * The type of the account holder (i.e CLIENT or GROUP)
     *
     * @return accountHolderType
     **/
    @ApiModelProperty(required = true, value = "The type of the account holder (i.e CLIENT or GROUP)")
    public AccountHolderTypeEnum getAccountHolderType() {
        return accountHolderType;
    }

    public void setAccountHolderType(AccountHolderTypeEnum accountHolderType) {
        this.accountHolderType = accountHolderType;
    }

    public DepositAccount accountHolderKey(String accountHolderKey) {
        this.accountHolderKey = accountHolderKey;
        return this;
    }

    /**
     * The encodedKey of the client or group (a.k.a account holder)
     *
     * @return accountHolderKey
     **/
    @ApiModelProperty(required = true, value = "The encodedKey of the client or group (a.k.a account holder)")
    public String getAccountHolderKey() {
        return accountHolderKey;
    }

    public void setAccountHolderKey(String accountHolderKey) {
        this.accountHolderKey = accountHolderKey;
    }

    /**
     * The state of the deposit account
     *
     * @return accountState
     **/
    @ApiModelProperty(value = "The state of the deposit account")
    public AccountStateEnum getAccountState() {
        return accountState;
    }

    public DepositAccount productTypeKey(String productTypeKey) {
        this.productTypeKey = productTypeKey;
        return this;
    }

    /**
     * The key to the type of product that this account is based on
     *
     * @return productTypeKey
     **/
    @ApiModelProperty(required = true, value = "The key to the type of product that this account is based on")
    public String getProductTypeKey() {
        return productTypeKey;
    }

    public void setProductTypeKey(String productTypeKey) {
        this.productTypeKey = productTypeKey;
    }

    public DepositAccount accountType(AccountTypeEnum accountType) {
        this.accountType = accountType;
        return this;
    }

    /**
     * Indicates the type of the deposit account and the product that it belongs to
     *
     * @return accountType
     **/
    @ApiModelProperty(value = "Indicates the type of the deposit account and the product that it belongs to")
    public AccountTypeEnum getAccountType() {
        return accountType;
    }

    public void setAccountType(AccountTypeEnum accountType) {
        this.accountType = accountType;
    }

    public DepositAccount creditArrangementKey(String creditArrangementKey) {
        this.creditArrangementKey = creditArrangementKey;
        return this;
    }

    /**
     * The key to the credit arrangement where this account is registered to
     *
     * @return creditArrangementKey
     **/
    @ApiModelProperty(value = "The key to the credit arrangement where this account is registered to")
    public String getCreditArrangementKey() {
        return creditArrangementKey;
    }

    public void setCreditArrangementKey(String creditArrangementKey) {
        this.creditArrangementKey = creditArrangementKey;
    }

    /**
     * The date this deposit account was approved (as Organization Time)
     *
     * @return approvedDate
     **/
    @ApiModelProperty(example = "2016-09-06T13:37:50+03:00", value = "The date this deposit account was approved (as Organization Time)")
    public OffsetDateTime getApprovedDate() {
        return approvedDate;
    }

    /**
     * The date this deposit account was activated (as Organization Time)
     *
     * @return activationDate
     **/
    @ApiModelProperty(example = "2016-09-06T13:37:50+03:00", value = "The date this deposit account was activated (as Organization Time)")
    public OffsetDateTime getActivationDate() {
        return activationDate;
    }

    /**
     * The date this deposit account was locked (as Organization Time)
     *
     * @return lockedDate
     **/
    @ApiModelProperty(example = "2016-09-06T13:37:50+03:00", value = "The date this deposit account was locked (as Organization Time)")
    public OffsetDateTime getLockedDate() {
        return lockedDate;
    }

    /**
     * For fixed or compulsory savings plans, this is when the account matures (as Organization Time)
     *
     * @return maturityDate
     **/
    @ApiModelProperty(example = "2016-09-06T13:37:50+03:00", value = "For fixed or compulsory savings plans, this is when the account matures (as Organization Time)")
    public OffsetDateTime getMaturityDate() {
        return maturityDate;
    }

    /**
     * The date this deposit account was closed (as UTC)
     *
     * @return closedDate
     **/
    @ApiModelProperty(example = "2016-09-06T13:37:50+03:00", value = "The date this deposit account was closed (as UTC)")
    public OffsetDateTime getClosedDate() {
        return closedDate;
    }

    /**
     * When/if the account had the interest last calculated (as Organization Time)
     *
     * @return lastInterestCalculationDate
     **/
    @ApiModelProperty(example = "2016-09-06T13:37:50+03:00", value = "When/if the account had the interest last calculated (as Organization Time)")
    public OffsetDateTime getLastInterestCalculationDate() {
        return lastInterestCalculationDate;
    }

    /**
     * When/if the account had last interest applied (stored to balance) (as Organization Time)
     *
     * @return lastInterestStoredDate
     **/
    @ApiModelProperty(example = "2016-09-06T13:37:50+03:00", value = "When/if the account had last interest applied (stored to balance) (as Organization Time)")
    public OffsetDateTime getLastInterestStoredDate() {
        return lastInterestStoredDate;
    }

    /**
     * When the overdraft interest was last time reviewed
     *
     * @return lastOverdraftInterestReviewDate
     **/
    @ApiModelProperty(example = "2016-09-06T13:37:50+03:00", value = "When the overdraft interest was last time reviewed")
    public OffsetDateTime getLastOverdraftInterestReviewDate() {
        return lastOverdraftInterestReviewDate;
    }

    /**
     * When/if the account had last been evaluated for interest calculations/maturity (as Organization Time)
     *
     * @return lastAccountAppraisalDate
     **/
    @ApiModelProperty(example = "2016-09-06T13:37:50+03:00", value = "When/if the account had last been evaluated for interest calculations/maturity (as Organization Time)")
    public OffsetDateTime getLastAccountAppraisalDate() {
        return lastAccountAppraisalDate;
    }

    /**
     * Date when the deposit account was set to In Arrears state, or null if the account is not In Arrears state (as Organization Time)
     *
     * @return lastSetToArrearsDate
     **/
    @ApiModelProperty(example = "2016-09-06T13:37:50+03:00", value = "Date when the deposit account was set to In Arrears state, or null if the account is not In Arrears state (as Organization Time)")
    public OffsetDateTime getLastSetToArrearsDate() {
        return lastSetToArrearsDate;
    }

    public DepositAccount currencyCode(String currencyCode) {
        this.currencyCode = currencyCode;
        return this;
    }

    /**
     * The currency code
     *
     * @return currencyCode
     **/
    @ApiModelProperty(value = "The currency code")
    public String getCurrencyCode() {
        return currencyCode;
    }

    public void setCurrencyCode(String currencyCode) {
        this.currencyCode = currencyCode;
    }

    public DepositAccount assignedBranchKey(String assignedBranchKey) {
        this.assignedBranchKey = assignedBranchKey;
        return this;
    }

    /**
     * Key of the branch this deposit account is assigned to
     *
     * @return assignedBranchKey
     **/
    @ApiModelProperty(value = "Key of the branch this deposit account is assigned to")
    public String getAssignedBranchKey() {
        return assignedBranchKey;
    }

    public void setAssignedBranchKey(String assignedBranchKey) {
        this.assignedBranchKey = assignedBranchKey;
    }

    public DepositAccount assignedCentreKey(String assignedCentreKey) {
        this.assignedCentreKey = assignedCentreKey;
        return this;
    }

    /**
     * Key of the centre this account is assigned to
     *
     * @return assignedCentreKey
     **/
    @ApiModelProperty(value = "Key of the centre this account is assigned to")
    public String getAssignedCentreKey() {
        return assignedCentreKey;
    }

    public void setAssignedCentreKey(String assignedCentreKey) {
        this.assignedCentreKey = assignedCentreKey;
    }

    public DepositAccount assignedUserKey(String assignedUserKey) {
        this.assignedUserKey = assignedUserKey;
        return this;
    }

    /**
     * Key of the user this deposit is assigned to
     *
     * @return assignedUserKey
     **/
    @ApiModelProperty(value = "Key of the user this deposit is assigned to")
    public String getAssignedUserKey() {
        return assignedUserKey;
    }

    public void setAssignedUserKey(String assignedUserKey) {
        this.assignedUserKey = assignedUserKey;
    }

    /**
     * The migration event encoded key associated with this deposit account. If this account was imported, track which &#39;migration event&#39; they came from.
     *
     * @return migrationEventKey
     **/
    @ApiModelProperty(value = "The migration event encoded key associated with this deposit account. If this account was imported, track which 'migration event' they came from.")
    public String getMigrationEventKey() {
        return migrationEventKey;
    }

    public DepositAccount withholdingTaxSourceKey(String withholdingTaxSourceKey) {
        this.withholdingTaxSourceKey = withholdingTaxSourceKey;
        return this;
    }

    /**
     * The tax source from where the account withholding taxes will be updated
     *
     * @return withholdingTaxSourceKey
     **/
    @ApiModelProperty(value = "The tax source from where the account withholding taxes will be updated")
    public String getWithholdingTaxSourceKey() {
        return withholdingTaxSourceKey;
    }

    public void setWithholdingTaxSourceKey(String withholdingTaxSourceKey) {
        this.withholdingTaxSourceKey = withholdingTaxSourceKey;
    }

    public DepositAccount internalControls(DepositAccountInternalControls internalControls) {
        this.internalControls = internalControls;
        return this;
    }

    /**
     * Groups all fields related to internal controls
     *
     * @return internalControls
     **/
    @ApiModelProperty(value = "Groups all fields related to internal controls")
    public DepositAccountInternalControls getInternalControls() {
        return internalControls;
    }

    public void setInternalControls(DepositAccountInternalControls internalControls) {
        this.internalControls = internalControls;
    }

    public DepositAccount overdraftSettings(DepositAccountOverdraftSettings overdraftSettings) {
        this.overdraftSettings = overdraftSettings;
        return this;
    }

    /**
     * Groups all fields related to overdraft settings
     *
     * @return overdraftSettings
     **/
    @ApiModelProperty(value = "Groups all fields related to overdraft settings")
    public DepositAccountOverdraftSettings getOverdraftSettings() {
        return overdraftSettings;
    }

    public void setOverdraftSettings(DepositAccountOverdraftSettings overdraftSettings) {
        this.overdraftSettings = overdraftSettings;
    }

    public DepositAccount interestSettings(DepositAccountInterestSettings interestSettings) {
        this.interestSettings = interestSettings;
        return this;
    }

    /**
     * Groups all fields related to interest settings
     *
     * @return interestSettings
     **/
    @ApiModelProperty(value = "Groups all fields related to interest settings")
    public DepositAccountInterestSettings getInterestSettings() {
        return interestSettings;
    }

    public void setInterestSettings(DepositAccountInterestSettings interestSettings) {
        this.interestSettings = interestSettings;
    }

    public DepositAccount overdraftInterestSettings(DepositAccountOverdraftInterestSettings overdraftInterestSettings) {
        this.overdraftInterestSettings = overdraftInterestSettings;
        return this;
    }

    /**
     * Groups all fields related to overdraft interest settings
     *
     * @return overdraftInterestSettings
     **/
    @ApiModelProperty(value = "Groups all fields related to overdraft interest settings")
    public DepositAccountOverdraftInterestSettings getOverdraftInterestSettings() {
        return overdraftInterestSettings;
    }

    public void setOverdraftInterestSettings(DepositAccountOverdraftInterestSettings overdraftInterestSettings) {
        this.overdraftInterestSettings = overdraftInterestSettings;
    }

    public DepositAccount balances(DepositAccountBalances balances) {
        this.balances = balances;
        return this;
    }

    /**
     * Groups all fields related to a deposit account&#39;s balances
     *
     * @return balances
     **/
    @ApiModelProperty(value = "Groups all fields related to a deposit account's balances")
    public DepositAccountBalances getBalances() {
        return balances;
    }

    public void setBalances(DepositAccountBalances balances) {
        this.balances = balances;
    }

    public DepositAccount accruedAmounts(DepositAccountAccruedAmounts accruedAmounts) {
        this.accruedAmounts = accruedAmounts;
        return this;
    }

    /**
     * Groups all fields related to a deposit account&#39;s accrued amounts
     *
     * @return accruedAmounts
     **/
    @ApiModelProperty(value = "Groups all fields related to a deposit account's accrued amounts")
    public DepositAccountAccruedAmounts getAccruedAmounts() {
        return accruedAmounts;
    }

    public void setAccruedAmounts(DepositAccountAccruedAmounts accruedAmounts) {
        this.accruedAmounts = accruedAmounts;
    }

    /**
     * Lists all loan&#39;s keys on which the deposit is used as a settlement account.
     *
     * @return linkedSettlementAccountKeys
     **/
    @ApiModelProperty(value = "Lists all loan's keys on which the deposit is used as a settlement account.")
    public List<String> getLinkedSettlementAccountKeys() {
        return linkedSettlementAccountKeys;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DepositAccount depositAccount = (DepositAccount) o;
        return Objects.equals(this.encodedKey, depositAccount.encodedKey) &&
                Objects.equals(this.creationDate, depositAccount.creationDate) &&
                Objects.equals(this.lastModifiedDate, depositAccount.lastModifiedDate) &&
                Objects.equals(this.id, depositAccount.id) &&
                Objects.equals(this.name, depositAccount.name) &&
                Objects.equals(this.notes, depositAccount.notes) &&
                Objects.equals(this.accountHolderType, depositAccount.accountHolderType) &&
                Objects.equals(this.accountHolderKey, depositAccount.accountHolderKey) &&
                Objects.equals(this.accountState, depositAccount.accountState) &&
                Objects.equals(this.productTypeKey, depositAccount.productTypeKey) &&
                Objects.equals(this.accountType, depositAccount.accountType) &&
                Objects.equals(this.creditArrangementKey, depositAccount.creditArrangementKey) &&
                Objects.equals(this.approvedDate, depositAccount.approvedDate) &&
                Objects.equals(this.activationDate, depositAccount.activationDate) &&
                Objects.equals(this.lockedDate, depositAccount.lockedDate) &&
                Objects.equals(this.maturityDate, depositAccount.maturityDate) &&
                Objects.equals(this.closedDate, depositAccount.closedDate) &&
                Objects.equals(this.lastInterestCalculationDate, depositAccount.lastInterestCalculationDate) &&
                Objects.equals(this.lastInterestStoredDate, depositAccount.lastInterestStoredDate) &&
                Objects.equals(this.lastOverdraftInterestReviewDate, depositAccount.lastOverdraftInterestReviewDate) &&
                Objects.equals(this.lastAccountAppraisalDate, depositAccount.lastAccountAppraisalDate) &&
                Objects.equals(this.lastSetToArrearsDate, depositAccount.lastSetToArrearsDate) &&
                Objects.equals(this.currencyCode, depositAccount.currencyCode) &&
                Objects.equals(this.assignedBranchKey, depositAccount.assignedBranchKey) &&
                Objects.equals(this.assignedCentreKey, depositAccount.assignedCentreKey) &&
                Objects.equals(this.assignedUserKey, depositAccount.assignedUserKey) &&
                Objects.equals(this.migrationEventKey, depositAccount.migrationEventKey) &&
                Objects.equals(this.withholdingTaxSourceKey, depositAccount.withholdingTaxSourceKey) &&
                Objects.equals(this.internalControls, depositAccount.internalControls) &&
                Objects.equals(this.overdraftSettings, depositAccount.overdraftSettings) &&
                Objects.equals(this.interestSettings, depositAccount.interestSettings) &&
                Objects.equals(this.overdraftInterestSettings, depositAccount.overdraftInterestSettings) &&
                Objects.equals(this.balances, depositAccount.balances) &&
                Objects.equals(this.accruedAmounts, depositAccount.accruedAmounts) &&
                Objects.equals(this.linkedSettlementAccountKeys, depositAccount.linkedSettlementAccountKeys);
    }

    @Override
    public int hashCode() {
        return Objects.hash(encodedKey, creationDate, lastModifiedDate, id, name, notes, accountHolderType, accountHolderKey, accountState, productTypeKey, accountType, creditArrangementKey, approvedDate, activationDate, lockedDate, maturityDate, closedDate, lastInterestCalculationDate, lastInterestStoredDate, lastOverdraftInterestReviewDate, lastAccountAppraisalDate, lastSetToArrearsDate, currencyCode, assignedBranchKey, assignedCentreKey, assignedUserKey, migrationEventKey, withholdingTaxSourceKey, internalControls, overdraftSettings, interestSettings, overdraftInterestSettings, balances, accruedAmounts, linkedSettlementAccountKeys);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class DepositAccount {\n");

        sb.append("    encodedKey: ").append(toIndentedString(encodedKey)).append("\n");
        sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
        sb.append("    lastModifiedDate: ").append(toIndentedString(lastModifiedDate)).append("\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
        sb.append("    accountHolderType: ").append(toIndentedString(accountHolderType)).append("\n");
        sb.append("    accountHolderKey: ").append(toIndentedString(accountHolderKey)).append("\n");
        sb.append("    accountState: ").append(toIndentedString(accountState)).append("\n");
        sb.append("    productTypeKey: ").append(toIndentedString(productTypeKey)).append("\n");
        sb.append("    accountType: ").append(toIndentedString(accountType)).append("\n");
        sb.append("    creditArrangementKey: ").append(toIndentedString(creditArrangementKey)).append("\n");
        sb.append("    approvedDate: ").append(toIndentedString(approvedDate)).append("\n");
        sb.append("    activationDate: ").append(toIndentedString(activationDate)).append("\n");
        sb.append("    lockedDate: ").append(toIndentedString(lockedDate)).append("\n");
        sb.append("    maturityDate: ").append(toIndentedString(maturityDate)).append("\n");
        sb.append("    closedDate: ").append(toIndentedString(closedDate)).append("\n");
        sb.append("    lastInterestCalculationDate: ").append(toIndentedString(lastInterestCalculationDate)).append("\n");
        sb.append("    lastInterestStoredDate: ").append(toIndentedString(lastInterestStoredDate)).append("\n");
        sb.append("    lastOverdraftInterestReviewDate: ").append(toIndentedString(lastOverdraftInterestReviewDate)).append("\n");
        sb.append("    lastAccountAppraisalDate: ").append(toIndentedString(lastAccountAppraisalDate)).append("\n");
        sb.append("    lastSetToArrearsDate: ").append(toIndentedString(lastSetToArrearsDate)).append("\n");
        sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
        sb.append("    assignedBranchKey: ").append(toIndentedString(assignedBranchKey)).append("\n");
        sb.append("    assignedCentreKey: ").append(toIndentedString(assignedCentreKey)).append("\n");
        sb.append("    assignedUserKey: ").append(toIndentedString(assignedUserKey)).append("\n");
        sb.append("    migrationEventKey: ").append(toIndentedString(migrationEventKey)).append("\n");
        sb.append("    withholdingTaxSourceKey: ").append(toIndentedString(withholdingTaxSourceKey)).append("\n");
        sb.append("    internalControls: ").append(toIndentedString(internalControls)).append("\n");
        sb.append("    overdraftSettings: ").append(toIndentedString(overdraftSettings)).append("\n");
        sb.append("    interestSettings: ").append(toIndentedString(interestSettings)).append("\n");
        sb.append("    overdraftInterestSettings: ").append(toIndentedString(overdraftInterestSettings)).append("\n");
        sb.append("    balances: ").append(toIndentedString(balances)).append("\n");
        sb.append("    accruedAmounts: ").append(toIndentedString(accruedAmounts)).append("\n");
        sb.append("    linkedSettlementAccountKeys: ").append(toIndentedString(linkedSettlementAccountKeys)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * The type of the account holder (i.e CLIENT or GROUP)
     */
    @JsonAdapter(AccountHolderTypeEnum.Adapter.class)
    public enum AccountHolderTypeEnum {
        CLIENT("CLIENT"),

        GROUP("GROUP");

        private String value;

        AccountHolderTypeEnum(String value) {
            this.value = value;
        }

        public static AccountHolderTypeEnum fromValue(String text) {
            for (AccountHolderTypeEnum b : AccountHolderTypeEnum.values()) {
                if (String.valueOf(b.value).equals(text)) {
                    return b;
                }
            }
            return null;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static class Adapter extends TypeAdapter<AccountHolderTypeEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final AccountHolderTypeEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public AccountHolderTypeEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return AccountHolderTypeEnum.fromValue(String.valueOf(value));
            }
        }
    }


    /**
     * The state of the deposit account
     */
    @JsonAdapter(AccountStateEnum.Adapter.class)
    public enum AccountStateEnum {
        PENDING_APPROVAL("PENDING_APPROVAL"),

        APPROVED("APPROVED"),

        ACTIVE("ACTIVE"),

        ACTIVE_IN_ARREARS("ACTIVE_IN_ARREARS"),

        MATURED("MATURED"),

        LOCKED("LOCKED"),

        DORMANT("DORMANT"),

        CLOSED("CLOSED"),

        CLOSED_WRITTEN_OFF("CLOSED_WRITTEN_OFF"),

        WITHDRAWN("WITHDRAWN"),

        CLOSED_REJECTED("CLOSED_REJECTED");

        private String value;

        AccountStateEnum(String value) {
            this.value = value;
        }

        public static AccountStateEnum fromValue(String text) {
            for (AccountStateEnum b : AccountStateEnum.values()) {
                if (String.valueOf(b.value).equals(text)) {
                    return b;
                }
            }
            return null;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static class Adapter extends TypeAdapter<AccountStateEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final AccountStateEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public AccountStateEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return AccountStateEnum.fromValue(String.valueOf(value));
            }
        }
    }

    /**
     * Indicates the type of the deposit account and the product that it belongs to
     */
    @JsonAdapter(AccountTypeEnum.Adapter.class)
    public enum AccountTypeEnum {
        CURRENT_ACCOUNT("CURRENT_ACCOUNT"),

        REGULAR_SAVINGS("REGULAR_SAVINGS"),

        FIXED_DEPOSIT("FIXED_DEPOSIT"),

        SAVINGS_PLAN("SAVINGS_PLAN"),

        INVESTOR_ACCOUNT("INVESTOR_ACCOUNT");

        private String value;

        AccountTypeEnum(String value) {
            this.value = value;
        }

        public static AccountTypeEnum fromValue(String text) {
            for (AccountTypeEnum b : AccountTypeEnum.values()) {
                if (String.valueOf(b.value).equals(text)) {
                    return b;
                }
            }
            return null;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static class Adapter extends TypeAdapter<AccountTypeEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final AccountTypeEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public AccountTypeEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return AccountTypeEnum.fromValue(String.valueOf(value));
            }
        }
    }

}

