/*
 * deposits
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.mambu.sdk.api.v2;

import com.google.gson.reflect.TypeToken;
import com.mambu.sdk.api.*;
import com.mambu.sdk.model.v2.*;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DepositAccountsApi {
    private ApiClient apiClient;

    public DepositAccountsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DepositAccountsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for changeState
     *
     * @param depositAccountId        The id or encoded key of the deposit account (required)
     * @param body                    Allows specifying the action details for a deposit account (required)
     * @param idempotencyKey          Key that can be used to support idempotency on this POST. Must be a valid UUID(version 4 is recommended) string and can only be used with the exact same request. Can be used in retry mechanisms to prevent double posting. (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call changeStateCall(String depositAccountId, DepositAccountAction body, String idempotencyKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/deposits/{depositAccountId}:changeState"
                .replaceAll("\\{" + "depositAccountId" + "\\}", apiClient.escapeString(depositAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (idempotencyKey != null)
            localVarHeaderParams.put("Idempotency-Key", apiClient.parameterToString(idempotencyKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/vnd.mambu.v2+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"basic"};
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call changeStateValidateBeforeCall(String depositAccountId, DepositAccountAction body, String idempotencyKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'depositAccountId' is set
        if (depositAccountId == null) {
            throw new ApiException("Missing the required parameter 'depositAccountId' when calling changeState(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling changeState(Async)");
        }


        com.squareup.okhttp.Call call = changeStateCall(depositAccountId, body, idempotencyKey, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Allows posting an action such as approve deposit account
     *
     * @param depositAccountId The id or encoded key of the deposit account (required)
     * @param body             Allows specifying the action details for a deposit account (required)
     * @param idempotencyKey   Key that can be used to support idempotency on this POST. Must be a valid UUID(version 4 is recommended) string and can only be used with the exact same request. Can be used in retry mechanisms to prevent double posting. (optional)
     * @return DepositAccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DepositAccount changeState(String depositAccountId, DepositAccountAction body, String idempotencyKey) throws ApiException {
        ApiResponse<DepositAccount> resp = changeStateWithHttpInfo(depositAccountId, body, idempotencyKey);
        return resp.getData();
    }

    /**
     * Allows posting an action such as approve deposit account
     *
     * @param depositAccountId The id or encoded key of the deposit account (required)
     * @param body             Allows specifying the action details for a deposit account (required)
     * @param idempotencyKey   Key that can be used to support idempotency on this POST. Must be a valid UUID(version 4 is recommended) string and can only be used with the exact same request. Can be used in retry mechanisms to prevent double posting. (optional)
     * @return ApiResponse&lt;DepositAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DepositAccount> changeStateWithHttpInfo(String depositAccountId, DepositAccountAction body, String idempotencyKey) throws ApiException {
        com.squareup.okhttp.Call call = changeStateValidateBeforeCall(depositAccountId, body, idempotencyKey, null, null);
        Type localVarReturnType = new TypeToken<DepositAccount>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Allows posting an action such as approve deposit account (asynchronously)
     *
     * @param depositAccountId The id or encoded key of the deposit account (required)
     * @param body             Allows specifying the action details for a deposit account (required)
     * @param idempotencyKey   Key that can be used to support idempotency on this POST. Must be a valid UUID(version 4 is recommended) string and can only be used with the exact same request. Can be used in retry mechanisms to prevent double posting. (optional)
     * @param callback         The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call changeStateAsync(String depositAccountId, DepositAccountAction body, String idempotencyKey, final ApiCallback<DepositAccount> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = changeStateValidateBeforeCall(depositAccountId, body, idempotencyKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DepositAccount>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for create
     *
     * @param body                    Deposit account to be created (required)
     * @param idempotencyKey          Key that can be used to support idempotency on this POST. Must be a valid UUID(version 4 is recommended) string and can only be used with the exact same request. Can be used in retry mechanisms to prevent double posting. (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createCall(DepositAccount body, String idempotencyKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/deposits";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (idempotencyKey != null)
            localVarHeaderParams.put("Idempotency-Key", apiClient.parameterToString(idempotencyKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/vnd.mambu.v2+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"basic"};
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createValidateBeforeCall(DepositAccount body, String idempotencyKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling create(Async)");
        }


        com.squareup.okhttp.Call call = createCall(body, idempotencyKey, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Creates a new deposit account
     *
     * @param body           Deposit account to be created (required)
     * @param idempotencyKey Key that can be used to support idempotency on this POST. Must be a valid UUID(version 4 is recommended) string and can only be used with the exact same request. Can be used in retry mechanisms to prevent double posting. (optional)
     * @return DepositAccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DepositAccount create(DepositAccount body, String idempotencyKey) throws ApiException {
        ApiResponse<DepositAccount> resp = createWithHttpInfo(body, idempotencyKey);
        return resp.getData();
    }

    /**
     * Creates a new deposit account
     *
     * @param body           Deposit account to be created (required)
     * @param idempotencyKey Key that can be used to support idempotency on this POST. Must be a valid UUID(version 4 is recommended) string and can only be used with the exact same request. Can be used in retry mechanisms to prevent double posting. (optional)
     * @return ApiResponse&lt;DepositAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DepositAccount> createWithHttpInfo(DepositAccount body, String idempotencyKey) throws ApiException {
        com.squareup.okhttp.Call call = createValidateBeforeCall(body, idempotencyKey, null, null);
        Type localVarReturnType = new TypeToken<DepositAccount>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates a new deposit account (asynchronously)
     *
     * @param body           Deposit account to be created (required)
     * @param idempotencyKey Key that can be used to support idempotency on this POST. Must be a valid UUID(version 4 is recommended) string and can only be used with the exact same request. Can be used in retry mechanisms to prevent double posting. (optional)
     * @param callback       The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createAsync(DepositAccount body, String idempotencyKey, final ApiCallback<DepositAccount> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createValidateBeforeCall(body, idempotencyKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DepositAccount>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for createCard
     *
     * @param depositAccountId        The id or encoded key of the deposit account (required)
     * @param body                    Card to be created (required)
     * @param idempotencyKey          Key that can be used to support idempotency on this POST. Must be a valid UUID(version 4 is recommended) string and can only be used with the exact same request. Can be used in retry mechanisms to prevent double posting. (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createCardCall(String depositAccountId, Card body, String idempotencyKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/deposits/{depositAccountId}/cards"
                .replaceAll("\\{" + "depositAccountId" + "\\}", apiClient.escapeString(depositAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (idempotencyKey != null)
            localVarHeaderParams.put("Idempotency-Key", apiClient.parameterToString(idempotencyKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/vnd.mambu.v2+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"basic"};
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createCardValidateBeforeCall(String depositAccountId, Card body, String idempotencyKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'depositAccountId' is set
        if (depositAccountId == null) {
            throw new ApiException("Missing the required parameter 'depositAccountId' when calling createCard(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createCard(Async)");
        }


        com.squareup.okhttp.Call call = createCardCall(depositAccountId, body, idempotencyKey, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create and associate a new card to the provided account
     *
     * @param depositAccountId The id or encoded key of the deposit account (required)
     * @param body             Card to be created (required)
     * @param idempotencyKey   Key that can be used to support idempotency on this POST. Must be a valid UUID(version 4 is recommended) string and can only be used with the exact same request. Can be used in retry mechanisms to prevent double posting. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createCard(String depositAccountId, Card body, String idempotencyKey) throws ApiException {
        createCardWithHttpInfo(depositAccountId, body, idempotencyKey);
    }

    /**
     * Create and associate a new card to the provided account
     *
     * @param depositAccountId The id or encoded key of the deposit account (required)
     * @param body             Card to be created (required)
     * @param idempotencyKey   Key that can be used to support idempotency on this POST. Must be a valid UUID(version 4 is recommended) string and can only be used with the exact same request. Can be used in retry mechanisms to prevent double posting. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createCardWithHttpInfo(String depositAccountId, Card body, String idempotencyKey) throws ApiException {
        com.squareup.okhttp.Call call = createCardValidateBeforeCall(depositAccountId, body, idempotencyKey, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create and associate a new card to the provided account (asynchronously)
     *
     * @param depositAccountId The id or encoded key of the deposit account (required)
     * @param body             Card to be created (required)
     * @param idempotencyKey   Key that can be used to support idempotency on this POST. Must be a valid UUID(version 4 is recommended) string and can only be used with the exact same request. Can be used in retry mechanisms to prevent double posting. (optional)
     * @param callback         The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createCardAsync(String depositAccountId, Card body, String idempotencyKey, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createCardValidateBeforeCall(depositAccountId, body, idempotencyKey, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    /**
     * Build call for delete
     *
     * @param depositAccountId        The id or encoded key of the deposit account (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteCall(String depositAccountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/deposits/{depositAccountId}"
                .replaceAll("\\{" + "depositAccountId" + "\\}", apiClient.escapeString(depositAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/vnd.mambu.v2+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"basic"};
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteValidateBeforeCall(String depositAccountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'depositAccountId' is set
        if (depositAccountId == null) {
            throw new ApiException("Missing the required parameter 'depositAccountId' when calling delete(Async)");
        }


        com.squareup.okhttp.Call call = deleteCall(depositAccountId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete an inactive deposit account via id or encoded key
     *
     * @param depositAccountId The id or encoded key of the deposit account (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void delete(String depositAccountId) throws ApiException {
        deleteWithHttpInfo(depositAccountId);
    }

    /**
     * Delete an inactive deposit account via id or encoded key
     *
     * @param depositAccountId The id or encoded key of the deposit account (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteWithHttpInfo(String depositAccountId) throws ApiException {
        com.squareup.okhttp.Call call = deleteValidateBeforeCall(depositAccountId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an inactive deposit account via id or encoded key (asynchronously)
     *
     * @param depositAccountId The id or encoded key of the deposit account (required)
     * @param callback         The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAsync(String depositAccountId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteValidateBeforeCall(depositAccountId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    /**
     * Build call for deleteCard
     *
     * @param depositAccountId        The id or encoded key of the deposit account (required)
     * @param cardReferenceToken      Reference token of the card to be retrieved (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteCardCall(String depositAccountId, String cardReferenceToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/deposits/{depositAccountId}/cards/{cardReferenceToken}"
                .replaceAll("\\{" + "depositAccountId" + "\\}", apiClient.escapeString(depositAccountId.toString()))
                .replaceAll("\\{" + "cardReferenceToken" + "\\}", apiClient.escapeString(cardReferenceToken.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/vnd.mambu.v2+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"basic"};
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteCardValidateBeforeCall(String depositAccountId, String cardReferenceToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'depositAccountId' is set
        if (depositAccountId == null) {
            throw new ApiException("Missing the required parameter 'depositAccountId' when calling deleteCard(Async)");
        }

        // verify the required parameter 'cardReferenceToken' is set
        if (cardReferenceToken == null) {
            throw new ApiException("Missing the required parameter 'cardReferenceToken' when calling deleteCard(Async)");
        }


        com.squareup.okhttp.Call call = deleteCardCall(depositAccountId, cardReferenceToken, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a card associated to the provided account via its reference token
     *
     * @param depositAccountId   The id or encoded key of the deposit account (required)
     * @param cardReferenceToken Reference token of the card to be retrieved (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteCard(String depositAccountId, String cardReferenceToken) throws ApiException {
        deleteCardWithHttpInfo(depositAccountId, cardReferenceToken);
    }

    /**
     * Delete a card associated to the provided account via its reference token
     *
     * @param depositAccountId   The id or encoded key of the deposit account (required)
     * @param cardReferenceToken Reference token of the card to be retrieved (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteCardWithHttpInfo(String depositAccountId, String cardReferenceToken) throws ApiException {
        com.squareup.okhttp.Call call = deleteCardValidateBeforeCall(depositAccountId, cardReferenceToken, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a card associated to the provided account via its reference token (asynchronously)
     *
     * @param depositAccountId   The id or encoded key of the deposit account (required)
     * @param cardReferenceToken Reference token of the card to be retrieved (required)
     * @param callback           The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteCardAsync(String depositAccountId, String cardReferenceToken, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteCardValidateBeforeCall(depositAccountId, cardReferenceToken, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    /**
     * Build call for getAll
     *
     * @param offset                  Pagination, index to start searching at when retrieving elements, used in combination with limit to paginate results (optional)
     * @param limit                   Pagination, the number of elements to retrieve, used in combination with offset to paginate results (optional)
     * @param paginationDetails       Flag specifying whether the pagination should be enabled or not. Please note that by default it is disabled (OFF), in order to improve the performance of the APIs (optional, default to OFF)
     * @param detailsLevel            The level of details to retrieve, FULL means the full details of the object will be retrieved (custom fields, address, contact info or any other related object), BASIC will return only the first level elements of the object (optional)
     * @param creditOfficerUsername   The username of the credit officer to whom the deposit accounts are assigned to (optional)
     * @param branchId                The id/encodedKey of the branch to which the deposit accounts are assigned to (optional)
     * @param centreId                The id/encodedKey of the centre to which the deposit accounts are assigned to (optional)
     * @param accountState            The state of the deposit accounts to filter on (optional)
     * @param accountHolderType       The type of the account holder: CLIENT/GROUP (optional)
     * @param accountHolderId         The id of the account holder (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllCall(Integer offset, Integer limit, String paginationDetails, String detailsLevel, String creditOfficerUsername, String branchId, String centreId, String accountState, String accountHolderType, String accountHolderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/deposits";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (offset != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (limit != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (paginationDetails != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("paginationDetails", paginationDetails));
        if (detailsLevel != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("detailsLevel", detailsLevel));
        if (creditOfficerUsername != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("creditOfficerUsername", creditOfficerUsername));
        if (branchId != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("branchId", branchId));
        if (centreId != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("centreId", centreId));
        if (accountState != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("accountState", accountState));
        if (accountHolderType != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("accountHolderType", accountHolderType));
        if (accountHolderId != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("accountHolderId", accountHolderId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/vnd.mambu.v2+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"basic"};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllValidateBeforeCall(Integer offset, Integer limit, String paginationDetails, String detailsLevel, String creditOfficerUsername, String branchId, String centreId, String accountState, String accountHolderType, String accountHolderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


        com.squareup.okhttp.Call call = getAllCall(offset, limit, paginationDetails, detailsLevel, creditOfficerUsername, branchId, centreId, accountState, accountHolderType, accountHolderId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Allows retrieval of deposit accounts using various query parameters. It&#39;s possible to look up deposits by their state, branch, centre or by a credit officer to which the deposits are assigned.
     *
     * @param offset                Pagination, index to start searching at when retrieving elements, used in combination with limit to paginate results (optional)
     * @param limit                 Pagination, the number of elements to retrieve, used in combination with offset to paginate results (optional)
     * @param paginationDetails     Flag specifying whether the pagination should be enabled or not. Please note that by default it is disabled (OFF), in order to improve the performance of the APIs (optional, default to OFF)
     * @param detailsLevel          The level of details to retrieve, FULL means the full details of the object will be retrieved (custom fields, address, contact info or any other related object), BASIC will return only the first level elements of the object (optional)
     * @param creditOfficerUsername The username of the credit officer to whom the deposit accounts are assigned to (optional)
     * @param branchId              The id/encodedKey of the branch to which the deposit accounts are assigned to (optional)
     * @param centreId              The id/encodedKey of the centre to which the deposit accounts are assigned to (optional)
     * @param accountState          The state of the deposit accounts to filter on (optional)
     * @param accountHolderType     The type of the account holder: CLIENT/GROUP (optional)
     * @param accountHolderId       The id of the account holder (optional)
     * @return List&lt;DepositAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DepositAccount> getAll(Integer offset, Integer limit, String paginationDetails, String detailsLevel, String creditOfficerUsername, String branchId, String centreId, String accountState, String accountHolderType, String accountHolderId) throws ApiException {
        ApiResponse<List<DepositAccount>> resp = getAllWithHttpInfo(offset, limit, paginationDetails, detailsLevel, creditOfficerUsername, branchId, centreId, accountState, accountHolderType, accountHolderId);
        return resp.getData();
    }

    /**
     * Allows retrieval of deposit accounts using various query parameters. It&#39;s possible to look up deposits by their state, branch, centre or by a credit officer to which the deposits are assigned.
     *
     * @param offset                Pagination, index to start searching at when retrieving elements, used in combination with limit to paginate results (optional)
     * @param limit                 Pagination, the number of elements to retrieve, used in combination with offset to paginate results (optional)
     * @param paginationDetails     Flag specifying whether the pagination should be enabled or not. Please note that by default it is disabled (OFF), in order to improve the performance of the APIs (optional, default to OFF)
     * @param detailsLevel          The level of details to retrieve, FULL means the full details of the object will be retrieved (custom fields, address, contact info or any other related object), BASIC will return only the first level elements of the object (optional)
     * @param creditOfficerUsername The username of the credit officer to whom the deposit accounts are assigned to (optional)
     * @param branchId              The id/encodedKey of the branch to which the deposit accounts are assigned to (optional)
     * @param centreId              The id/encodedKey of the centre to which the deposit accounts are assigned to (optional)
     * @param accountState          The state of the deposit accounts to filter on (optional)
     * @param accountHolderType     The type of the account holder: CLIENT/GROUP (optional)
     * @param accountHolderId       The id of the account holder (optional)
     * @return ApiResponse&lt;List&lt;DepositAccount&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DepositAccount>> getAllWithHttpInfo(Integer offset, Integer limit, String paginationDetails, String detailsLevel, String creditOfficerUsername, String branchId, String centreId, String accountState, String accountHolderType, String accountHolderId) throws ApiException {
        com.squareup.okhttp.Call call = getAllValidateBeforeCall(offset, limit, paginationDetails, detailsLevel, creditOfficerUsername, branchId, centreId, accountState, accountHolderType, accountHolderId, null, null);
        Type localVarReturnType = new TypeToken<List<DepositAccount>>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Allows retrieval of deposit accounts using various query parameters. It&#39;s possible to look up deposits by their state, branch, centre or by a credit officer to which the deposits are assigned. (asynchronously)
     *
     * @param offset                Pagination, index to start searching at when retrieving elements, used in combination with limit to paginate results (optional)
     * @param limit                 Pagination, the number of elements to retrieve, used in combination with offset to paginate results (optional)
     * @param paginationDetails     Flag specifying whether the pagination should be enabled or not. Please note that by default it is disabled (OFF), in order to improve the performance of the APIs (optional, default to OFF)
     * @param detailsLevel          The level of details to retrieve, FULL means the full details of the object will be retrieved (custom fields, address, contact info or any other related object), BASIC will return only the first level elements of the object (optional)
     * @param creditOfficerUsername The username of the credit officer to whom the deposit accounts are assigned to (optional)
     * @param branchId              The id/encodedKey of the branch to which the deposit accounts are assigned to (optional)
     * @param centreId              The id/encodedKey of the centre to which the deposit accounts are assigned to (optional)
     * @param accountState          The state of the deposit accounts to filter on (optional)
     * @param accountHolderType     The type of the account holder: CLIENT/GROUP (optional)
     * @param accountHolderId       The id of the account holder (optional)
     * @param callback              The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllAsync(Integer offset, Integer limit, String paginationDetails, String detailsLevel, String creditOfficerUsername, String branchId, String centreId, String accountState, String accountHolderType, String accountHolderId, final ApiCallback<List<DepositAccount>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllValidateBeforeCall(offset, limit, paginationDetails, detailsLevel, creditOfficerUsername, branchId, centreId, accountState, accountHolderType, accountHolderId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DepositAccount>>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for getAllAuthorizationHolds
     *
     * @param depositAccountId        The id or encoded key of the deposit account (required)
     * @param offset                  Pagination, index to start searching at when retrieving elements, used in combination with limit to paginate results (optional)
     * @param limit                   Pagination, the number of elements to retrieve, used in combination with offset to paginate results (optional)
     * @param paginationDetails       Flag specifying whether the pagination should be enabled or not. Please note that by default it is disabled (OFF), in order to improve the performance of the APIs (optional, default to OFF)
     * @param status                  The status of the authorization holds to filter on (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllAuthorizationHoldsCall(String depositAccountId, Integer offset, Integer limit, String paginationDetails, String status, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/deposits/{depositAccountId}/authorizationholds"
                .replaceAll("\\{" + "depositAccountId" + "\\}", apiClient.escapeString(depositAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (offset != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (limit != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (paginationDetails != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("paginationDetails", paginationDetails));
        if (status != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("status", status));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/vnd.mambu.v2+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"basic"};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllAuthorizationHoldsValidateBeforeCall(String depositAccountId, Integer offset, Integer limit, String paginationDetails, String status, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'depositAccountId' is set
        if (depositAccountId == null) {
            throw new ApiException("Missing the required parameter 'depositAccountId' when calling getAllAuthorizationHolds(Async)");
        }


        com.squareup.okhttp.Call call = getAllAuthorizationHoldsCall(depositAccountId, offset, limit, paginationDetails, status, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieves the authorization holds related to a deposit account, ordered from newest to oldest by creation date
     *
     * @param depositAccountId  The id or encoded key of the deposit account (required)
     * @param offset            Pagination, index to start searching at when retrieving elements, used in combination with limit to paginate results (optional)
     * @param limit             Pagination, the number of elements to retrieve, used in combination with offset to paginate results (optional)
     * @param paginationDetails Flag specifying whether the pagination should be enabled or not. Please note that by default it is disabled (OFF), in order to improve the performance of the APIs (optional, default to OFF)
     * @param status            The status of the authorization holds to filter on (optional)
     * @return List&lt;AuthorizationHold&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<AuthorizationHold> getAllAuthorizationHolds(String depositAccountId, Integer offset, Integer limit, String paginationDetails, String status) throws ApiException {
        ApiResponse<List<AuthorizationHold>> resp = getAllAuthorizationHoldsWithHttpInfo(depositAccountId, offset, limit, paginationDetails, status);
        return resp.getData();
    }

    /**
     * Retrieves the authorization holds related to a deposit account, ordered from newest to oldest by creation date
     *
     * @param depositAccountId  The id or encoded key of the deposit account (required)
     * @param offset            Pagination, index to start searching at when retrieving elements, used in combination with limit to paginate results (optional)
     * @param limit             Pagination, the number of elements to retrieve, used in combination with offset to paginate results (optional)
     * @param paginationDetails Flag specifying whether the pagination should be enabled or not. Please note that by default it is disabled (OFF), in order to improve the performance of the APIs (optional, default to OFF)
     * @param status            The status of the authorization holds to filter on (optional)
     * @return ApiResponse&lt;List&lt;AuthorizationHold&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<AuthorizationHold>> getAllAuthorizationHoldsWithHttpInfo(String depositAccountId, Integer offset, Integer limit, String paginationDetails, String status) throws ApiException {
        com.squareup.okhttp.Call call = getAllAuthorizationHoldsValidateBeforeCall(depositAccountId, offset, limit, paginationDetails, status, null, null);
        Type localVarReturnType = new TypeToken<List<AuthorizationHold>>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves the authorization holds related to a deposit account, ordered from newest to oldest by creation date (asynchronously)
     *
     * @param depositAccountId  The id or encoded key of the deposit account (required)
     * @param offset            Pagination, index to start searching at when retrieving elements, used in combination with limit to paginate results (optional)
     * @param limit             Pagination, the number of elements to retrieve, used in combination with offset to paginate results (optional)
     * @param paginationDetails Flag specifying whether the pagination should be enabled or not. Please note that by default it is disabled (OFF), in order to improve the performance of the APIs (optional, default to OFF)
     * @param status            The status of the authorization holds to filter on (optional)
     * @param callback          The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllAuthorizationHoldsAsync(String depositAccountId, Integer offset, Integer limit, String paginationDetails, String status, final ApiCallback<List<AuthorizationHold>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllAuthorizationHoldsValidateBeforeCall(depositAccountId, offset, limit, paginationDetails, status, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<AuthorizationHold>>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for getAllCards
     *
     * @param depositAccountId        The id or encoded key of the deposit account (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllCardsCall(String depositAccountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/deposits/{depositAccountId}/cards"
                .replaceAll("\\{" + "depositAccountId" + "\\}", apiClient.escapeString(depositAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/vnd.mambu.v2+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"basic"};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllCardsValidateBeforeCall(String depositAccountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'depositAccountId' is set
        if (depositAccountId == null) {
            throw new ApiException("Missing the required parameter 'depositAccountId' when calling getAllCards(Async)");
        }


        com.squareup.okhttp.Call call = getAllCardsCall(depositAccountId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Allows retrieval of all cards associated with the account
     *
     * @param depositAccountId The id or encoded key of the deposit account (required)
     * @return List&lt;Card&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Card> getAllCards(String depositAccountId) throws ApiException {
        ApiResponse<List<Card>> resp = getAllCardsWithHttpInfo(depositAccountId);
        return resp.getData();
    }

    /**
     * Allows retrieval of all cards associated with the account
     *
     * @param depositAccountId The id or encoded key of the deposit account (required)
     * @return ApiResponse&lt;List&lt;Card&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Card>> getAllCardsWithHttpInfo(String depositAccountId) throws ApiException {
        com.squareup.okhttp.Call call = getAllCardsValidateBeforeCall(depositAccountId, null, null);
        Type localVarReturnType = new TypeToken<List<Card>>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Allows retrieval of all cards associated with the account (asynchronously)
     *
     * @param depositAccountId The id or encoded key of the deposit account (required)
     * @param callback         The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllCardsAsync(String depositAccountId, final ApiCallback<List<Card>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllCardsValidateBeforeCall(depositAccountId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Card>>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for getById
     *
     * @param depositAccountId        The id or encoded key of the deposit account (required)
     * @param detailsLevel            The level of details to retrieve, FULL means the full details of the object will be retrieved (custom fields, address, contact info or any other related object), BASIC will return only the first level elements of the object (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getByIdCall(String depositAccountId, String detailsLevel, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/deposits/{depositAccountId}"
                .replaceAll("\\{" + "depositAccountId" + "\\}", apiClient.escapeString(depositAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (detailsLevel != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("detailsLevel", detailsLevel));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/vnd.mambu.v2+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"basic"};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getByIdValidateBeforeCall(String depositAccountId, String detailsLevel, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'depositAccountId' is set
        if (depositAccountId == null) {
            throw new ApiException("Missing the required parameter 'depositAccountId' when calling getById(Async)");
        }


        com.squareup.okhttp.Call call = getByIdCall(depositAccountId, detailsLevel, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Allows retrieval of a single deposit account via id or encoded key
     *
     * @param depositAccountId The id or encoded key of the deposit account (required)
     * @param detailsLevel     The level of details to retrieve, FULL means the full details of the object will be retrieved (custom fields, address, contact info or any other related object), BASIC will return only the first level elements of the object (optional)
     * @return DepositAccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DepositAccount getById(String depositAccountId, String detailsLevel) throws ApiException {
        ApiResponse<DepositAccount> resp = getByIdWithHttpInfo(depositAccountId, detailsLevel);
        return resp.getData();
    }

    /**
     * Allows retrieval of a single deposit account via id or encoded key
     *
     * @param depositAccountId The id or encoded key of the deposit account (required)
     * @param detailsLevel     The level of details to retrieve, FULL means the full details of the object will be retrieved (custom fields, address, contact info or any other related object), BASIC will return only the first level elements of the object (optional)
     * @return ApiResponse&lt;DepositAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DepositAccount> getByIdWithHttpInfo(String depositAccountId, String detailsLevel) throws ApiException {
        com.squareup.okhttp.Call call = getByIdValidateBeforeCall(depositAccountId, detailsLevel, null, null);
        Type localVarReturnType = new TypeToken<DepositAccount>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Allows retrieval of a single deposit account via id or encoded key (asynchronously)
     *
     * @param depositAccountId The id or encoded key of the deposit account (required)
     * @param detailsLevel     The level of details to retrieve, FULL means the full details of the object will be retrieved (custom fields, address, contact info or any other related object), BASIC will return only the first level elements of the object (optional)
     * @param callback         The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getByIdAsync(String depositAccountId, String detailsLevel, final ApiCallback<DepositAccount> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getByIdValidateBeforeCall(depositAccountId, detailsLevel, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DepositAccount>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for patch
     *
     * @param depositAccountId        The id or encoded key of the deposit account (required)
     * @param body                    Patch operations to be applied to a resource (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call patchCall(String depositAccountId, List<PatchOperation> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/deposits/{depositAccountId}"
                .replaceAll("\\{" + "depositAccountId" + "\\}", apiClient.escapeString(depositAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/vnd.mambu.v2+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"basic"};
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call patchValidateBeforeCall(String depositAccountId, List<PatchOperation> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'depositAccountId' is set
        if (depositAccountId == null) {
            throw new ApiException("Missing the required parameter 'depositAccountId' when calling patch(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling patch(Async)");
        }


        com.squareup.okhttp.Call call = patchCall(depositAccountId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Partially update a deposit account
     *
     * @param depositAccountId The id or encoded key of the deposit account (required)
     * @param body             Patch operations to be applied to a resource (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void patch(String depositAccountId, List<PatchOperation> body) throws ApiException {
        patchWithHttpInfo(depositAccountId, body);
    }

    /**
     * Partially update a deposit account
     *
     * @param depositAccountId The id or encoded key of the deposit account (required)
     * @param body             Patch operations to be applied to a resource (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> patchWithHttpInfo(String depositAccountId, List<PatchOperation> body) throws ApiException {
        com.squareup.okhttp.Call call = patchValidateBeforeCall(depositAccountId, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Partially update a deposit account (asynchronously)
     *
     * @param depositAccountId The id or encoded key of the deposit account (required)
     * @param body             Patch operations to be applied to a resource (required)
     * @param callback         The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call patchAsync(String depositAccountId, List<PatchOperation> body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = patchValidateBeforeCall(depositAccountId, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    /**
     * Build call for update
     *
     * @param depositAccountId        The id or encoded key of the deposit account (required)
     * @param body                    (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateCall(String depositAccountId, DepositAccount body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/deposits/{depositAccountId}"
                .replaceAll("\\{" + "depositAccountId" + "\\}", apiClient.escapeString(depositAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/vnd.mambu.v2+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"basic"};
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateValidateBeforeCall(String depositAccountId, DepositAccount body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'depositAccountId' is set
        if (depositAccountId == null) {
            throw new ApiException("Missing the required parameter 'depositAccountId' when calling update(Async)");
        }


        com.squareup.okhttp.Call call = updateCall(depositAccountId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update an existing deposit account
     *
     * @param depositAccountId The id or encoded key of the deposit account (required)
     * @param body             (optional)
     * @return DepositAccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DepositAccount update(String depositAccountId, DepositAccount body) throws ApiException {
        ApiResponse<DepositAccount> resp = updateWithHttpInfo(depositAccountId, body);
        return resp.getData();
    }

    /**
     * Update an existing deposit account
     *
     * @param depositAccountId The id or encoded key of the deposit account (required)
     * @param body             (optional)
     * @return ApiResponse&lt;DepositAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DepositAccount> updateWithHttpInfo(String depositAccountId, DepositAccount body) throws ApiException {
        com.squareup.okhttp.Call call = updateValidateBeforeCall(depositAccountId, body, null, null);
        Type localVarReturnType = new TypeToken<DepositAccount>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update an existing deposit account (asynchronously)
     *
     * @param depositAccountId The id or encoded key of the deposit account (required)
     * @param body             (optional)
     * @param callback         The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateAsync(String depositAccountId, DepositAccount body, final ApiCallback<DepositAccount> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateValidateBeforeCall(depositAccountId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DepositAccount>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
