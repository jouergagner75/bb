/*
 * deposits
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.mambu.sdk.model.v2;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.math.BigDecimal;
import java.util.Objects;

/**
 * An authorization hold entry as a result of a hold action performed by a card acceptor.
 */
@ApiModel(description = "An authorization hold entry as a result of a hold action performed by a card acceptor.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-04-17T14:24:31.447Z")
public class AuthorizationHold {
    @SerializedName("encodedKey")
    private String encodedKey = null;

    @SerializedName("cardToken")
    private String cardToken = null;

    @SerializedName("externalReferenceId")
    private String externalReferenceId = null;

    @SerializedName("advice")
    private Boolean advice = false;

    @SerializedName("amount")
    private BigDecimal amount = null;

    @SerializedName("currencyCode")
    private String currencyCode = null;

    @SerializedName("cardAcceptor")
    private CardAcceptor cardAcceptor = null;

    @SerializedName("userTransactionTime")
    private String userTransactionTime = null;
    @SerializedName("status")
    private StatusEnum status = null;

    /**
     * The internal ID of the authorization hold, auto generated, unique.
     *
     * @return encodedKey
     **/
    @ApiModelProperty(value = "The internal ID of the authorization hold, auto generated, unique.")
    public String getEncodedKey() {
        return encodedKey;
    }

    /**
     * The reference token of the card.
     *
     * @return cardToken
     **/
    @ApiModelProperty(value = "The reference token of the card.")
    public String getCardToken() {
        return cardToken;
    }

    public AuthorizationHold externalReferenceId(String externalReferenceId) {
        this.externalReferenceId = externalReferenceId;
        return this;
    }

    /**
     * The external reference ID to be used to reference the account hold in subsequent requests.
     *
     * @return externalReferenceId
     **/
    @ApiModelProperty(required = true, value = "The external reference ID to be used to reference the account hold in subsequent requests.")
    public String getExternalReferenceId() {
        return externalReferenceId;
    }

    public void setExternalReferenceId(String externalReferenceId) {
        this.externalReferenceId = externalReferenceId;
    }

    public AuthorizationHold advice(Boolean advice) {
        this.advice = advice;
        return this;
    }

    /**
     * Whether the given request should be accepted without balance validations.
     *
     * @return advice
     **/
    @ApiModelProperty(required = true, value = "Whether the given request should be accepted without balance validations.")
    public Boolean isAdvice() {
        return advice;
    }

    public void setAdvice(Boolean advice) {
        this.advice = advice;
    }

    public AuthorizationHold amount(BigDecimal amount) {
        this.amount = amount;
        return this;
    }

    /**
     * The amount of money to be held as a result of the authorization hold request.
     *
     * @return amount
     **/
    @ApiModelProperty(required = true, value = "The amount of money to be held as a result of the authorization hold request.")
    public BigDecimal getAmount() {
        return amount;
    }

    public void setAmount(BigDecimal amount) {
        this.amount = amount;
    }

    public AuthorizationHold currencyCode(String currencyCode) {
        this.currencyCode = currencyCode;
        return this;
    }

    /**
     * The ISO currency code in which the hold was created. The amounts are stored in the base currency, but the user could have enter it in a foreign currency.
     *
     * @return currencyCode
     **/
    @ApiModelProperty(value = "The ISO currency code in which the hold was created. The amounts are stored in the base currency, but the user could have enter it in a foreign currency.")
    public String getCurrencyCode() {
        return currencyCode;
    }

    public void setCurrencyCode(String currencyCode) {
        this.currencyCode = currencyCode;
    }

    public AuthorizationHold cardAcceptor(CardAcceptor cardAcceptor) {
        this.cardAcceptor = cardAcceptor;
        return this;
    }

    /**
     * The card acceptor details.
     *
     * @return cardAcceptor
     **/
    @ApiModelProperty(value = "The card acceptor details.")
    public CardAcceptor getCardAcceptor() {
        return cardAcceptor;
    }

    public void setCardAcceptor(CardAcceptor cardAcceptor) {
        this.cardAcceptor = cardAcceptor;
    }

    public AuthorizationHold userTransactionTime(String userTransactionTime) {
        this.userTransactionTime = userTransactionTime;
        return this;
    }

    /**
     * The formatted time at which the user made this authorization hold.
     *
     * @return userTransactionTime
     **/
    @ApiModelProperty(value = "The formatted time at which the user made this authorization hold.")
    public String getUserTransactionTime() {
        return userTransactionTime;
    }

    public void setUserTransactionTime(String userTransactionTime) {
        this.userTransactionTime = userTransactionTime;
    }

    /**
     * The authorization hold status.
     *
     * @return status
     **/
    @ApiModelProperty(value = "The authorization hold status.")
    public StatusEnum getStatus() {
        return status;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AuthorizationHold authorizationHold = (AuthorizationHold) o;
        return Objects.equals(this.encodedKey, authorizationHold.encodedKey) &&
                Objects.equals(this.cardToken, authorizationHold.cardToken) &&
                Objects.equals(this.externalReferenceId, authorizationHold.externalReferenceId) &&
                Objects.equals(this.advice, authorizationHold.advice) &&
                Objects.equals(this.amount, authorizationHold.amount) &&
                Objects.equals(this.currencyCode, authorizationHold.currencyCode) &&
                Objects.equals(this.cardAcceptor, authorizationHold.cardAcceptor) &&
                Objects.equals(this.userTransactionTime, authorizationHold.userTransactionTime) &&
                Objects.equals(this.status, authorizationHold.status);
    }

    @Override
    public int hashCode() {
        return Objects.hash(encodedKey, cardToken, externalReferenceId, advice, amount, currencyCode, cardAcceptor, userTransactionTime, status);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class AuthorizationHold {\n");

        sb.append("    encodedKey: ").append(toIndentedString(encodedKey)).append("\n");
        sb.append("    cardToken: ").append(toIndentedString(cardToken)).append("\n");
        sb.append("    externalReferenceId: ").append(toIndentedString(externalReferenceId)).append("\n");
        sb.append("    advice: ").append(toIndentedString(advice)).append("\n");
        sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
        sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
        sb.append("    cardAcceptor: ").append(toIndentedString(cardAcceptor)).append("\n");
        sb.append("    userTransactionTime: ").append(toIndentedString(userTransactionTime)).append("\n");
        sb.append("    status: ").append(toIndentedString(status)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * The authorization hold status.
     */
    @JsonAdapter(StatusEnum.Adapter.class)
    public enum StatusEnum {
        PENDING("PENDING"),

        REVERSED("REVERSED"),

        SETTLED("SETTLED"),

        EXPIRED("EXPIRED");

        private String value;

        StatusEnum(String value) {
            this.value = value;
        }

        public static StatusEnum fromValue(String text) {
            for (StatusEnum b : StatusEnum.values()) {
                if (String.valueOf(b.value).equals(text)) {
                    return b;
                }
            }
            return null;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static class Adapter extends TypeAdapter<StatusEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public StatusEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return StatusEnum.fromValue(String.valueOf(value));
            }
        }
    }

}

