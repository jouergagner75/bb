/*
 * clients
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.mambu.sdk.api.v2;

import com.google.gson.reflect.TypeToken;
import com.mambu.sdk.api.*;
import com.mambu.sdk.model.v2.Client;
import com.mambu.sdk.model.v2.ClientRole;
import com.mambu.sdk.model.v2.PatchOperation;
import org.threeten.bp.LocalDate;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ClientsApi {
    private ApiClient apiClient;

    public ClientsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ClientsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for create
     *
     * @param body                    Client to be created (required)
     * @param idempotencyKey          Key that can be used to support idempotency on this POST. Must be a valid UUID(version 4 is recommended) string and can only be used with the exact same request. Can be used in retry mechanisms to prevent double posting. (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createCall(Client body, String idempotencyKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/clients";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (idempotencyKey != null)
            localVarHeaderParams.put("Idempotency-Key", apiClient.parameterToString(idempotencyKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/vnd.mambu.v2+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"basic"};
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createValidateBeforeCall(Client body, String idempotencyKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling create(Async)");
        }


        com.squareup.okhttp.Call call = createCall(body, idempotencyKey, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a new client
     *
     * @param body           Client to be created (required)
     * @param idempotencyKey Key that can be used to support idempotency on this POST. Must be a valid UUID(version 4 is recommended) string and can only be used with the exact same request. Can be used in retry mechanisms to prevent double posting. (optional)
     * @return Client
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Client create(Client body, String idempotencyKey) throws ApiException {
        ApiResponse<Client> resp = createWithHttpInfo(body, idempotencyKey);
        return resp.getData();
    }

    /**
     * Create a new client
     *
     * @param body           Client to be created (required)
     * @param idempotencyKey Key that can be used to support idempotency on this POST. Must be a valid UUID(version 4 is recommended) string and can only be used with the exact same request. Can be used in retry mechanisms to prevent double posting. (optional)
     * @return ApiResponse&lt;Client&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Client> createWithHttpInfo(Client body, String idempotencyKey) throws ApiException {
        com.squareup.okhttp.Call call = createValidateBeforeCall(body, idempotencyKey, null, null);
        Type localVarReturnType = new TypeToken<Client>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new client (asynchronously)
     *
     * @param body           Client to be created (required)
     * @param idempotencyKey Key that can be used to support idempotency on this POST. Must be a valid UUID(version 4 is recommended) string and can only be used with the exact same request. Can be used in retry mechanisms to prevent double posting. (optional)
     * @param callback       The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createAsync(Client body, String idempotencyKey, final ApiCallback<Client> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createValidateBeforeCall(body, idempotencyKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Client>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for delete
     *
     * @param clientId                The id or encoded key of the client to be deleted (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteCall(String clientId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/clients/{clientId}"
                .replaceAll("\\{" + "clientId" + "\\}", apiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/vnd.mambu.v2+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"basic"};
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteValidateBeforeCall(String clientId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling delete(Async)");
        }


        com.squareup.okhttp.Call call = deleteCall(clientId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a client
     *
     * @param clientId The id or encoded key of the client to be deleted (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void delete(String clientId) throws ApiException {
        deleteWithHttpInfo(clientId);
    }

    /**
     * Delete a client
     *
     * @param clientId The id or encoded key of the client to be deleted (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteWithHttpInfo(String clientId) throws ApiException {
        com.squareup.okhttp.Call call = deleteValidateBeforeCall(clientId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a client (asynchronously)
     *
     * @param clientId The id or encoded key of the client to be deleted (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAsync(String clientId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteValidateBeforeCall(clientId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    /**
     * Build call for getAll
     *
     * @param offset                  Pagination, index to start searching at when retrieving elements, used in combination with limit to paginate results (optional)
     * @param limit                   Pagination, the number of elements to retrieve, used in combination with offset to paginate results (optional)
     * @param paginationDetails       Flag specifying whether the pagination should be enabled or not. Please note that by default it is disabled (OFF), in order to improve the performance of the APIs (optional, default to OFF)
     * @param detailsLevel            The level of details to retrieve, FULL means the full details of the object will be retrieved (custom fields, address, contact info or any other related object), BASIC will return only the first level elements of the object (optional)
     * @param firstName               The first name, personal name, given name or forename of the client (optional)
     * @param lastName                The last name, surname or family name of the client (optional)
     * @param idNumber                The id number of the client&#39;s identification document (optional)
     * @param branchId                The branch id/key to search for (optional)
     * @param centreId                The centre id/key to search for (optional)
     * @param creditOfficerUsername   The user name of the credit officer (optional)
     * @param state                   The state of the client to search for (optional)
     * @param birthDate               The birth date of the client to search for (optional)
     * @param sortBy                  The criteria based on which the records will be sorted. Expected format is &lt;field:order&gt;, eg sortBy &#x3D; field1:ASC,field2:DESC.&lt;br/&gt;Only the following fields can be used: firstName, lastName, creationDate, lastModifiedDate&lt;br/&gt;Default sorting is done by  lastModifiedDate:DESC (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllCall(Integer offset, Integer limit, String paginationDetails, String detailsLevel, String firstName, String lastName, String idNumber, String branchId, String centreId, String creditOfficerUsername, String state, LocalDate birthDate, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/clients";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (offset != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (limit != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (paginationDetails != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("paginationDetails", paginationDetails));
        if (detailsLevel != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("detailsLevel", detailsLevel));
        if (firstName != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("firstName", firstName));
        if (lastName != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("lastName", lastName));
        if (idNumber != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("idNumber", idNumber));
        if (branchId != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("branchId", branchId));
        if (centreId != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("centreId", centreId));
        if (creditOfficerUsername != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("creditOfficerUsername", creditOfficerUsername));
        if (state != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("state", state));
        if (birthDate != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("birthDate", birthDate));
        if (sortBy != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("sortBy", sortBy));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/vnd.mambu.v2+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"basic"};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllValidateBeforeCall(Integer offset, Integer limit, String paginationDetails, String detailsLevel, String firstName, String lastName, String idNumber, String branchId, String centreId, String creditOfficerUsername, String state, LocalDate birthDate, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


        com.squareup.okhttp.Call call = getAllCall(offset, limit, paginationDetails, detailsLevel, firstName, lastName, idNumber, branchId, centreId, creditOfficerUsername, state, birthDate, sortBy, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Allows retrieval of clients using various query parameters
     *
     * @param offset                Pagination, index to start searching at when retrieving elements, used in combination with limit to paginate results (optional)
     * @param limit                 Pagination, the number of elements to retrieve, used in combination with offset to paginate results (optional)
     * @param paginationDetails     Flag specifying whether the pagination should be enabled or not. Please note that by default it is disabled (OFF), in order to improve the performance of the APIs (optional, default to OFF)
     * @param detailsLevel          The level of details to retrieve, FULL means the full details of the object will be retrieved (custom fields, address, contact info or any other related object), BASIC will return only the first level elements of the object (optional)
     * @param firstName             The first name, personal name, given name or forename of the client (optional)
     * @param lastName              The last name, surname or family name of the client (optional)
     * @param idNumber              The id number of the client&#39;s identification document (optional)
     * @param branchId              The branch id/key to search for (optional)
     * @param centreId              The centre id/key to search for (optional)
     * @param creditOfficerUsername The user name of the credit officer (optional)
     * @param state                 The state of the client to search for (optional)
     * @param birthDate             The birth date of the client to search for (optional)
     * @param sortBy                The criteria based on which the records will be sorted. Expected format is &lt;field:order&gt;, eg sortBy &#x3D; field1:ASC,field2:DESC.&lt;br/&gt;Only the following fields can be used: firstName, lastName, creationDate, lastModifiedDate&lt;br/&gt;Default sorting is done by  lastModifiedDate:DESC (optional)
     * @return List&lt;Client&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Client> getAll(Integer offset, Integer limit, String paginationDetails, String detailsLevel, String firstName, String lastName, String idNumber, String branchId, String centreId, String creditOfficerUsername, String state, LocalDate birthDate, String sortBy) throws ApiException {
        ApiResponse<List<Client>> resp = getAllWithHttpInfo(offset, limit, paginationDetails, detailsLevel, firstName, lastName, idNumber, branchId, centreId, creditOfficerUsername, state, birthDate, sortBy);
        return resp.getData();
    }

    /**
     * Allows retrieval of clients using various query parameters
     *
     * @param offset                Pagination, index to start searching at when retrieving elements, used in combination with limit to paginate results (optional)
     * @param limit                 Pagination, the number of elements to retrieve, used in combination with offset to paginate results (optional)
     * @param paginationDetails     Flag specifying whether the pagination should be enabled or not. Please note that by default it is disabled (OFF), in order to improve the performance of the APIs (optional, default to OFF)
     * @param detailsLevel          The level of details to retrieve, FULL means the full details of the object will be retrieved (custom fields, address, contact info or any other related object), BASIC will return only the first level elements of the object (optional)
     * @param firstName             The first name, personal name, given name or forename of the client (optional)
     * @param lastName              The last name, surname or family name of the client (optional)
     * @param idNumber              The id number of the client&#39;s identification document (optional)
     * @param branchId              The branch id/key to search for (optional)
     * @param centreId              The centre id/key to search for (optional)
     * @param creditOfficerUsername The user name of the credit officer (optional)
     * @param state                 The state of the client to search for (optional)
     * @param birthDate             The birth date of the client to search for (optional)
     * @param sortBy                The criteria based on which the records will be sorted. Expected format is &lt;field:order&gt;, eg sortBy &#x3D; field1:ASC,field2:DESC.&lt;br/&gt;Only the following fields can be used: firstName, lastName, creationDate, lastModifiedDate&lt;br/&gt;Default sorting is done by  lastModifiedDate:DESC (optional)
     * @return ApiResponse&lt;List&lt;Client&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Client>> getAllWithHttpInfo(Integer offset, Integer limit, String paginationDetails, String detailsLevel, String firstName, String lastName, String idNumber, String branchId, String centreId, String creditOfficerUsername, String state, LocalDate birthDate, String sortBy) throws ApiException {
        com.squareup.okhttp.Call call = getAllValidateBeforeCall(offset, limit, paginationDetails, detailsLevel, firstName, lastName, idNumber, branchId, centreId, creditOfficerUsername, state, birthDate, sortBy, null, null);
        Type localVarReturnType = new TypeToken<List<Client>>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Allows retrieval of clients using various query parameters (asynchronously)
     *
     * @param offset                Pagination, index to start searching at when retrieving elements, used in combination with limit to paginate results (optional)
     * @param limit                 Pagination, the number of elements to retrieve, used in combination with offset to paginate results (optional)
     * @param paginationDetails     Flag specifying whether the pagination should be enabled or not. Please note that by default it is disabled (OFF), in order to improve the performance of the APIs (optional, default to OFF)
     * @param detailsLevel          The level of details to retrieve, FULL means the full details of the object will be retrieved (custom fields, address, contact info or any other related object), BASIC will return only the first level elements of the object (optional)
     * @param firstName             The first name, personal name, given name or forename of the client (optional)
     * @param lastName              The last name, surname or family name of the client (optional)
     * @param idNumber              The id number of the client&#39;s identification document (optional)
     * @param branchId              The branch id/key to search for (optional)
     * @param centreId              The centre id/key to search for (optional)
     * @param creditOfficerUsername The user name of the credit officer (optional)
     * @param state                 The state of the client to search for (optional)
     * @param birthDate             The birth date of the client to search for (optional)
     * @param sortBy                The criteria based on which the records will be sorted. Expected format is &lt;field:order&gt;, eg sortBy &#x3D; field1:ASC,field2:DESC.&lt;br/&gt;Only the following fields can be used: firstName, lastName, creationDate, lastModifiedDate&lt;br/&gt;Default sorting is done by  lastModifiedDate:DESC (optional)
     * @param callback              The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllAsync(Integer offset, Integer limit, String paginationDetails, String detailsLevel, String firstName, String lastName, String idNumber, String branchId, String centreId, String creditOfficerUsername, String state, LocalDate birthDate, String sortBy, final ApiCallback<List<Client>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllValidateBeforeCall(offset, limit, paginationDetails, detailsLevel, firstName, lastName, idNumber, branchId, centreId, creditOfficerUsername, state, birthDate, sortBy, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Client>>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for getById
     *
     * @param clientId                The id or encoded key of the client to be retrieved (required)
     * @param detailsLevel            The level of details to retrieve, FULL means the full details of the object will be retrieved (custom fields, address, contact info or any other related object), BASIC will return only the first level elements of the object (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getByIdCall(String clientId, String detailsLevel, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/clients/{clientId}"
                .replaceAll("\\{" + "clientId" + "\\}", apiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (detailsLevel != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("detailsLevel", detailsLevel));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/vnd.mambu.v2+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"basic"};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getByIdValidateBeforeCall(String clientId, String detailsLevel, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling getById(Async)");
        }


        com.squareup.okhttp.Call call = getByIdCall(clientId, detailsLevel, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Allows retrieval of a single client via id or encoded key
     *
     * @param clientId     The id or encoded key of the client to be retrieved (required)
     * @param detailsLevel The level of details to retrieve, FULL means the full details of the object will be retrieved (custom fields, address, contact info or any other related object), BASIC will return only the first level elements of the object (optional)
     * @return Client
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Client getById(String clientId, String detailsLevel) throws ApiException {
        ApiResponse<Client> resp = getByIdWithHttpInfo(clientId, detailsLevel);
        return resp.getData();
    }

    /**
     * Allows retrieval of a single client via id or encoded key
     *
     * @param clientId     The id or encoded key of the client to be retrieved (required)
     * @param detailsLevel The level of details to retrieve, FULL means the full details of the object will be retrieved (custom fields, address, contact info or any other related object), BASIC will return only the first level elements of the object (optional)
     * @return ApiResponse&lt;Client&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Client> getByIdWithHttpInfo(String clientId, String detailsLevel) throws ApiException {
        com.squareup.okhttp.Call call = getByIdValidateBeforeCall(clientId, detailsLevel, null, null);
        Type localVarReturnType = new TypeToken<Client>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Allows retrieval of a single client via id or encoded key (asynchronously)
     *
     * @param clientId     The id or encoded key of the client to be retrieved (required)
     * @param detailsLevel The level of details to retrieve, FULL means the full details of the object will be retrieved (custom fields, address, contact info or any other related object), BASIC will return only the first level elements of the object (optional)
     * @param callback     The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getByIdAsync(String clientId, String detailsLevel, final ApiCallback<Client> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getByIdValidateBeforeCall(clientId, detailsLevel, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Client>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for getRoleByClientId
     *
     * @param clientId                The id or encoded key of the client to be retrieved (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRoleByClientIdCall(String clientId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/clients/{clientId}/role"
                .replaceAll("\\{" + "clientId" + "\\}", apiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/vnd.mambu.v2+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"basic"};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRoleByClientIdValidateBeforeCall(String clientId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling getRoleByClientId(Async)");
        }


        com.squareup.okhttp.Call call = getRoleByClientIdCall(clientId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Allows to retrieve the client role for a client
     *
     * @param clientId The id or encoded key of the client to be retrieved (required)
     * @return ClientRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClientRole getRoleByClientId(String clientId) throws ApiException {
        ApiResponse<ClientRole> resp = getRoleByClientIdWithHttpInfo(clientId);
        return resp.getData();
    }

    /**
     * Allows to retrieve the client role for a client
     *
     * @param clientId The id or encoded key of the client to be retrieved (required)
     * @return ApiResponse&lt;ClientRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClientRole> getRoleByClientIdWithHttpInfo(String clientId) throws ApiException {
        com.squareup.okhttp.Call call = getRoleByClientIdValidateBeforeCall(clientId, null, null);
        Type localVarReturnType = new TypeToken<ClientRole>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Allows to retrieve the client role for a client (asynchronously)
     *
     * @param clientId The id or encoded key of the client to be retrieved (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRoleByClientIdAsync(String clientId, final ApiCallback<ClientRole> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRoleByClientIdValidateBeforeCall(clientId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClientRole>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for patch
     *
     * @param clientId                The id or encoded key of the client to be updated (required)
     * @param body                    Patch operations to be applied to a resource (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call patchCall(String clientId, List<PatchOperation> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/clients/{clientId}"
                .replaceAll("\\{" + "clientId" + "\\}", apiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/vnd.mambu.v2+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"basic"};
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call patchValidateBeforeCall(String clientId, List<PatchOperation> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling patch(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling patch(Async)");
        }


        com.squareup.okhttp.Call call = patchCall(clientId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Partially update an existing client
     *
     * @param clientId The id or encoded key of the client to be updated (required)
     * @param body     Patch operations to be applied to a resource (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void patch(String clientId, List<PatchOperation> body) throws ApiException {
        patchWithHttpInfo(clientId, body);
    }

    /**
     * Partially update an existing client
     *
     * @param clientId The id or encoded key of the client to be updated (required)
     * @param body     Patch operations to be applied to a resource (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> patchWithHttpInfo(String clientId, List<PatchOperation> body) throws ApiException {
        com.squareup.okhttp.Call call = patchValidateBeforeCall(clientId, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Partially update an existing client (asynchronously)
     *
     * @param clientId The id or encoded key of the client to be updated (required)
     * @param body     Patch operations to be applied to a resource (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call patchAsync(String clientId, List<PatchOperation> body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = patchValidateBeforeCall(clientId, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    /**
     * Build call for update
     *
     * @param clientId                The id or encoded key of the client to be updated (required)
     * @param body                    Client to be updated (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateCall(String clientId, Client body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/clients/{clientId}"
                .replaceAll("\\{" + "clientId" + "\\}", apiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/vnd.mambu.v2+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"basic"};
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateValidateBeforeCall(String clientId, Client body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling update(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling update(Async)");
        }


        com.squareup.okhttp.Call call = updateCall(clientId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update an existing client
     *
     * @param clientId The id or encoded key of the client to be updated (required)
     * @param body     Client to be updated (required)
     * @return Client
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Client update(String clientId, Client body) throws ApiException {
        ApiResponse<Client> resp = updateWithHttpInfo(clientId, body);
        return resp.getData();
    }

    /**
     * Update an existing client
     *
     * @param clientId The id or encoded key of the client to be updated (required)
     * @param body     Client to be updated (required)
     * @return ApiResponse&lt;Client&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Client> updateWithHttpInfo(String clientId, Client body) throws ApiException {
        com.squareup.okhttp.Call call = updateValidateBeforeCall(clientId, body, null, null);
        Type localVarReturnType = new TypeToken<Client>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update an existing client (asynchronously)
     *
     * @param clientId The id or encoded key of the client to be updated (required)
     * @param body     Client to be updated (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateAsync(String clientId, Client body, final ApiCallback<Client> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateValidateBeforeCall(clientId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Client>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
