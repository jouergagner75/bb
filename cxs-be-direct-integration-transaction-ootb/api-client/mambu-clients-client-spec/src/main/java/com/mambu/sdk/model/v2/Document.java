/*
 * clients
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.mambu.sdk.model.v2;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.threeten.bp.OffsetDateTime;

import java.io.IOException;
import java.util.Objects;

/**
 * Holds information regarding the documents uploaded as attachments
 */
@ApiModel(description = "Holds information regarding the documents uploaded as attachments")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-04-17T14:40:27.775Z")
public class Document {
    @SerializedName("encodedKey")
    private String encodedKey = null;

    @SerializedName("id")
    private Long id = null;

    @SerializedName("creationDate")
    private OffsetDateTime creationDate = null;

    @SerializedName("lastModifiedDate")
    private OffsetDateTime lastModifiedDate = null;

    @SerializedName("ownerKey")
    private String ownerKey = null;
    @SerializedName("ownerType")
    private OwnerTypeEnum ownerType = null;
    @SerializedName("name")
    private String name = null;
    @SerializedName("type")
    private String type = null;
    @SerializedName("fileSize")
    private Long fileSize = null;
    @SerializedName("fileName")
    private String fileName = null;
    @SerializedName("location")
    private String location = null;
    @SerializedName("notes")
    private String notes = null;

    /**
     * The document encodedKey
     *
     * @return encodedKey
     **/
    @ApiModelProperty(value = "The document encodedKey")
    public String getEncodedKey() {
        return encodedKey;
    }

    public Document id(Long id) {
        this.id = id;
        return this;
    }

    /**
     * The document id
     *
     * @return id
     **/
    @ApiModelProperty(required = true, value = "The document id")
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /**
     * The creation date of the document, stored as UTC
     *
     * @return creationDate
     **/
    @ApiModelProperty(example = "2016-09-06T13:37:50+03:00", value = "The creation date of the document, stored as UTC")
    public OffsetDateTime getCreationDate() {
        return creationDate;
    }

    /**
     * The last modified date of the document, stored as UTC
     *
     * @return lastModifiedDate
     **/
    @ApiModelProperty(example = "2016-09-06T13:37:50+03:00", value = "The last modified date of the document, stored as UTC")
    public OffsetDateTime getLastModifiedDate() {
        return lastModifiedDate;
    }

    /**
     * Represents the holder of this document. If null, means nobody is the owner of this document
     *
     * @return ownerKey
     **/
    @ApiModelProperty(value = "Represents the holder of this document. If null, means nobody is the owner of this document")
    public String getOwnerKey() {
        return ownerKey;
    }

    /**
     * Determines the owner type of the document
     *
     * @return ownerType
     **/
    @ApiModelProperty(value = "Determines the owner type of the document")
    public OwnerTypeEnum getOwnerType() {
        return ownerType;
    }

    public Document name(String name) {
        this.name = name;
        return this;
    }

    /**
     * The name of the document
     *
     * @return name
     **/
    @ApiModelProperty(required = true, value = "The name of the document")
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Document type(String type) {
        this.type = type;
        return this;
    }

    /**
     * The extension of the document
     *
     * @return type
     **/
    @ApiModelProperty(required = true, value = "The extension of the document")
    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    public Document fileSize(Long fileSize) {
        this.fileSize = fileSize;
        return this;
    }

    /**
     * The file size of the document
     *
     * @return fileSize
     **/
    @ApiModelProperty(value = "The file size of the document")
    public Long getFileSize() {
        return fileSize;
    }

    public void setFileSize(Long fileSize) {
        this.fileSize = fileSize;
    }

    public Document fileName(String fileName) {
        this.fileName = fileName;
        return this;
    }

    /**
     * The original file name of the document
     *
     * @return fileName
     **/
    @ApiModelProperty(value = "The original file name of the document")
    public String getFileName() {
        return fileName;
    }

    public void setFileName(String fileName) {
        this.fileName = fileName;
    }

    public Document location(String location) {
        this.location = location;
        return this;
    }

    /**
     * Location where the document can be found, eg /myfiles/mypicture.jpeg
     *
     * @return location
     **/
    @ApiModelProperty(value = "Location where the document can be found, eg /myfiles/mypicture.jpeg")
    public String getLocation() {
        return location;
    }

    public void setLocation(String location) {
        this.location = location;
    }

    public Document notes(String notes) {
        this.notes = notes;
        return this;
    }

    /**
     * Detailed notes about the document
     *
     * @return notes
     **/
    @ApiModelProperty(value = "Detailed notes about the document")
    public String getNotes() {
        return notes;
    }

    public void setNotes(String notes) {
        this.notes = notes;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Document document = (Document) o;
        return Objects.equals(this.encodedKey, document.encodedKey) &&
                Objects.equals(this.id, document.id) &&
                Objects.equals(this.creationDate, document.creationDate) &&
                Objects.equals(this.lastModifiedDate, document.lastModifiedDate) &&
                Objects.equals(this.ownerKey, document.ownerKey) &&
                Objects.equals(this.ownerType, document.ownerType) &&
                Objects.equals(this.name, document.name) &&
                Objects.equals(this.type, document.type) &&
                Objects.equals(this.fileSize, document.fileSize) &&
                Objects.equals(this.fileName, document.fileName) &&
                Objects.equals(this.location, document.location) &&
                Objects.equals(this.notes, document.notes);
    }

    @Override
    public int hashCode() {
        return Objects.hash(encodedKey, id, creationDate, lastModifiedDate, ownerKey, ownerType, name, type, fileSize, fileName, location, notes);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class Document {\n");

        sb.append("    encodedKey: ").append(toIndentedString(encodedKey)).append("\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
        sb.append("    lastModifiedDate: ").append(toIndentedString(lastModifiedDate)).append("\n");
        sb.append("    ownerKey: ").append(toIndentedString(ownerKey)).append("\n");
        sb.append("    ownerType: ").append(toIndentedString(ownerType)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    type: ").append(toIndentedString(type)).append("\n");
        sb.append("    fileSize: ").append(toIndentedString(fileSize)).append("\n");
        sb.append("    fileName: ").append(toIndentedString(fileName)).append("\n");
        sb.append("    location: ").append(toIndentedString(location)).append("\n");
        sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Determines the owner type of the document
     */
    @JsonAdapter(OwnerTypeEnum.Adapter.class)
    public enum OwnerTypeEnum {
        CLIENT("CLIENT"),

        GROUP("GROUP"),

        LOAN_PRODUCT("LOAN_PRODUCT"),

        SAVINGS_PRODUCT("SAVINGS_PRODUCT"),

        CENTRE("CENTRE"),

        BRANCH("BRANCH"),

        USER("USER"),

        LOAN_ACCOUNT("LOAN_ACCOUNT"),

        DEPOSIT_ACCOUNT("DEPOSIT_ACCOUNT"),

        ID_DOCUMENT("ID_DOCUMENT"),

        LINE_OF_CREDIT("LINE_OF_CREDIT"),

        GL_JOURNAL_ENTRY("GL_JOURNAL_ENTRY");

        private String value;

        OwnerTypeEnum(String value) {
            this.value = value;
        }

        public static OwnerTypeEnum fromValue(String text) {
            for (OwnerTypeEnum b : OwnerTypeEnum.values()) {
                if (String.valueOf(b.value).equals(text)) {
                    return b;
                }
            }
            return null;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static class Adapter extends TypeAdapter<OwnerTypeEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final OwnerTypeEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public OwnerTypeEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return OwnerTypeEnum.fromValue(String.valueOf(value));
            }
        }
    }

}

